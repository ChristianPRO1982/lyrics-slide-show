"""
Django settings for lyrics_slide_show project.

Generated by 'django-admin startproject' using Django 5.1.3.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/

For Google developer console:
https://console.cloud.google.com/cloud-resource-manager?walkthrough_id=resource-manager--create-project&start_index=1&hl=fr&pli=1&invt=AbtzSg#step_index=1
"""

from pathlib import Path
from django.urls import path, include
from django.contrib import admin
import os



# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.getenv("SECRET_KEY")
GOOGLE_CLIENT_ID = os.getenv('GOOGLE_CLIENT_ID')
GOOGLE_CLIENT_SECRET = os.getenv('GOOGLE_CLIENT_SECRET')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.getenv("DEBUG", "False") == '1'

ALLOWED_HOSTS = ['*']


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    'allauth',
    'allauth.account',
    'allauth.socialaccount',
    'allauth.socialaccount.providers.google',
    'app_main',
    'app_group',
    'app_song',
    'app_animation',
    'app_logs',
]

AUTHENTICATION_BACKENDS = [
    'django.contrib.auth.backends.ModelBackend',  # Nécessaire pour Django
    'allauth.account.auth_backends.AuthenticationBackend',  # Auth avec allauth
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'allauth.account.middleware.AccountMiddleware',
]

ROOT_URLCONF = 'lyrics_slide_show.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [BASE_DIR / 'templates'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'django.template.context_processors.i18n',
                'lyrics_slide_show.context_processors.global_variables',
            ],
        },
    },
]

SOCIALACCOUNT_PROVIDERS = {
    'google': {
        'APP': {
            'client_id': GOOGLE_CLIENT_ID,
            'secret': GOOGLE_CLIENT_SECRET,
        },
        'SCOPE': [
            'profile',
            'email',
        ],
        'AUTH_PARAMS': {'access_type': 'online'},
        'METHOD': 'oauth2',
        'VERIFIED_EMAIL': True,
    }
}

WSGI_APPLICATION = 'lyrics_slide_show.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DB_FUNCTIONAL_HOST = os.getenv('DB_FUNCTIONAL_HOST')
DB_FUNCTIONAL_USER = os.getenv('DB_FUNCTIONAL_USER')
DB_FUNCTIONAL_PASSWORD = os.getenv('DB_FUNCTIONAL_PASSWORD')
DB_FUNCTIONAL_DATABASE = os.getenv('DB_FUNCTIONAL_DATABASE')
DB_FUNCTIONAL_SSL = os.getenv('DB_FUNCTIONAL_SSL')

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': DB_FUNCTIONAL_DATABASE,
        'USER': DB_FUNCTIONAL_USER,
        'PASSWORD': DB_FUNCTIONAL_PASSWORD,
        'HOST': DB_FUNCTIONAL_HOST,
        'PORT': '3306', # port par défaut de MySQL
        # 'OPTIONS': {
        #     'ssl': {
        #         'ca': DB_FUNCTIONAL_SSL,  # Chemin vers le fichier du certificat CA
        #     }
        # }
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

# LANGUAGE_CODE = 'en-us'
LANGUAGE_CODE = 'fr'

LANGUAGES = [
    ('fr', 'Français'),
    ('en', 'English'),
]

LOCALE_PATHS = [BASE_DIR / 'locale']

# TIME_ZONE = 'UTC'
TIME_ZONE = 'Europe/Paris'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')
STATICFILES_DIRS = [os.path.join(BASE_DIR, 'static')]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

SITE_ID = 1  # Allauth en a besoin pour fonctionner

SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')

APPEND_SLASH = True # If True, Django will append a slash at the end of URLs that do not have one.

# LOGIN_URL = '/admin/login/?next=/admin/'
LOGIN_URL = '/account/login/'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/'

# --- Loader debug config (simulate slow network) ---
LOADER_DEBUG = os.getenv("LOADER_DEBUG", "0") == "1"
LOADER_DEBUG_DELAY_MS = int(os.getenv("LOADER_DEBUG_DELAY_MS", "1500"))

# --- user's medias
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"

IMG_TEMP_SUBDIR = "backgrounds/tmp"
IMG_VALIDATED_SUBDIR = "backgrounds/validated"

IMG_TEMP_DIR = MEDIA_ROOT / IMG_TEMP_SUBDIR
IMG_VALIDATED_DIR = MEDIA_ROOT / IMG_VALIDATED_SUBDIR

IMG_TEMP_URL = os.path.join(MEDIA_URL, IMG_TEMP_SUBDIR + "/")
IMG_VALIDATED_URL = os.path.join(MEDIA_URL, IMG_VALIDATED_SUBDIR + "/")