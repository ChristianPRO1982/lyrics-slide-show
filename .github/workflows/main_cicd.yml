name: CI/CD - Main Branch

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  build-and-push:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up QEMU (for multi-platform builds)
        uses: docker/setup-qemu-action@v2

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}2
          password: ${{ secrets.DOCKERHUB_TOKEN }}2

      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          file: ./Dockerfile
          push: true
          tags: |
            carthographie/lyrics-slide-show:latest

  # Triggers n8n backup via Webhook and waits for completion (2xx = success, >=400 = fail).
  n8n_backup:
    runs-on: ubuntu-latest
    timeout-minutes: 30
    steps:
      - name: Call n8n webhook and wait for completion
        env:
          N8N_WEBHOOK_URL: ${{ secrets.N8N_WEBHOOK_URL }}     # URL prod du Webhook
          N8N_USER:        ${{ secrets.N8N_USER }}            # Basic auth user
          N8N_PASS:        ${{ secrets.N8N_PASS }}            # Basic auth pass
        run: |
          set -euo pipefail
          payload=$(jq -n --arg repo "$GITHUB_REPOSITORY" --arg sha "$GITHUB_SHA" --arg ref "$GITHUB_REF_NAME" \
            '{repo:$repo, sha:$sha, ref:$ref, action:"pre-deploy-backup"}')

          code=$(curl -sS -m 1800 -w "%{http_code}" -o response.json \
            -u "${N8N_USER}:${N8N_PASS}" \
            -H "content-type: application/json" \
            -X POST "$N8N_WEBHOOK_URL" \
            -d "$payload")

          echo "HTTP_STATUS=$code"
          echo "RESPONSE_BODY=$(tr -d '\n' < response.json | head -c 500)"
          test "$code" -ge 200 -a "$code" -lt 300


  deploy:
    name: Deploy to OVH VPS
    needs:
      - build-and-push
      - n8n_backup
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Deploy via SSH
        uses: appleboy/ssh-action@v0.1.10
        with:
          host: ${{ secrets.SSH_HOST }}
          username: ${{ secrets.SSH_USER }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.SSH_PORT }}
          script: |
            cd lyrics-slide-show
            docker compose pull
            docker compose up -d
            docker image prune -f

  test:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m venv venv
          source venv/bin/activate
          pip install -r requirements.txt

      - name: Set environment variables
        run: |
          echo "DEBUG=4" >> $GITHUB_ENV
          echo "LOGS_PATH=./logs/" >> $GITHUB_ENV

      - name: Run pytest
        run: |
          source venv/bin/activate
          pytest --disable-warnings -q

  release:
    needs:
      - deploy
      - test
    permissions:
      contents: write
      issues: write
      pull-requests: write
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '20'

      - name: Install dependencies for npm
        run: |
          npm install

      - name: Configure Git
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"

      - name: Run Semantic Release
        run: |
          npx semantic-release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
